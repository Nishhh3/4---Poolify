# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage, Label
import mysql.connector
import HomePage

# from tkinter import *
# Explicit imports to satisfy Flake8


OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"C:\Users\ASUS\Downloads\donor pfp\build\assets\frame0")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


class DonorDashboard(Tk):
    def __init__(self, email=None):
        super().__init__()
        self.email = email
        self.donor_data = None
        
        self.geometry("1280x720")
        self.configure(bg="#FFFFFF")
        self.title("Donor Dashboard")
        
        # If email is provided, fetch donor data from database
        if email:
            self.fetch_donor_data()
        
        # Setup the UI
        self.create_ui()
        self.resizable(False, False)
    
    def fetch_donor_data(self):
        """Fetch donor details from the database using email"""
        connection = None
        cursor = None
        try:
            connection = mysql.connector.connect(
                host="localhost",
                user="root",
                password="Y@sh8105",
                database="Transplant"
            )
            cursor = connection.cursor(dictionary=True)
            
            # Query to get donor details
            cursor.execute("SELECT * FROM donors WHERE Email=%s", (self.email,))
            self.donor_data = cursor.fetchone()
            
            # Consume any remaining results to avoid "Unread result found" error
            while cursor.nextset():
                pass
                
        except mysql.connector.Error as e:
            print(f"Database Error: {e}")
            self.donor_data = None
        finally:
            # Always properly close cursor and connection
            if cursor:
                cursor.close()
            if connection and connection.is_connected():
                connection.close()
    
    def create_ui(self):
        # Define output path and assets path
        OUTPUT_PATH = Path(__file__).parent
        ASSETS_PATH = OUTPUT_PATH / Path(r"C:\Users\ASUS\Downloads\donor pfp\build\assets\frame0")
        
        def relative_to_assets(path):
            return ASSETS_PATH / Path(path)
        
        # Create Canvas
        self.canvas = Canvas(
            self,
            bg="#FFFFFF",
            height=720,
            width=1280,
            bd=0,
            highlightthickness=0,
            relief="ridge"
        )
        self.canvas.place(x=0, y=0)
        
        # Background Image
        self.image_image_1 = PhotoImage(file=relative_to_assets("image_1.png"))
        self.image_1 = self.canvas.create_image(
            640.0, 360.0, image=self.image_image_1
        )
        
        # Separator Rectangle
        self.canvas.create_rectangle(
            -5.0, 92.0, 1280.0, 97.0, fill="#000000", outline=""
        )
        
        # Header Image
        self.image_image_2 = PhotoImage(file=relative_to_assets("image_2.png"))
        self.image_2 = self.canvas.create_image(
            666.0, 51.0, image=self.image_image_2
        )
        
        # Profile Box Images
        self.image_image_3 = PhotoImage(file=relative_to_assets("image_3.png"))
        self.image_3 = self.canvas.create_image(
            367.0, 415.0, image=self.image_image_3
        )
        
        self.image_image_4 = PhotoImage(file=relative_to_assets("image_4.png"))
        self.image_4 = self.canvas.create_image(
            367.0, 415.0, image=self.image_image_4
        )
        
        self.image_image_5 = PhotoImage(file=relative_to_assets("image_5.png"))
        self.image_5 = self.canvas.create_image(
            367.0, 312.0, image=self.image_image_5
        )
        
        # Text Labels for Personal Information
        self.canvas.create_text(
            161.0, 196.7, anchor="nw", text="Name :", 
            fill="#000000", font=("Inter", 20 * -1)
        )
        
        self.canvas.create_text(
            161.0, 237.4, anchor="nw", text="Email :", 
            fill="#000000", font=("Inter", 20 * -1)
        )
        
        self.canvas.create_text(
            161.0, 278.1, anchor="nw", text="Age :", 
            fill="#000000", font=("Inter", 20 * -1)
        )
        
        self.canvas.create_text(
            161.0, 318.8, anchor="nw", text="Aadhaar no. :", 
            fill="#000000", font=("Inter", 20 * -1)
        )
        
        self.canvas.create_text(
            161.0, 356.4, anchor="nw", text="Medical history :", 
            fill="#000000", font=("Inter", 20 * -1)
        )
        
        self.canvas.create_text(
            161.0, 397.1, anchor="nw", text="Address :", 
            fill="#000000", font=("Inter", 20 * -1)
        )
        
        # Additional Image
        self.image_image_6 = PhotoImage(file=relative_to_assets("image_6.png"))
        self.image_6 = self.canvas.create_image(
            367.0, 534.0, image=self.image_image_6
        )
        
        # Text Labels for Additional Information
        self.canvas.create_text(
            161.0, 482.8, anchor="nw", text="Gender :", 
            fill="#000000", font=("Inter", 20 * -1)
        )
        
        self.canvas.create_text(
            161.0, 520.4, anchor="nw", text="Blood Group :", 
            fill="#000000", font=("Inter", 20 * -1)
        )
        
        self.canvas.create_text(
            159.0, 558.0, anchor="nw", text="Organ to donate :", 
            fill="#000000", font=("Inter", 20 * -1)
        )
        
        # More Images
        self.image_image_7 = PhotoImage(file=relative_to_assets("image_7.png"))
        self.image_7 = self.canvas.create_image(
            975.0, 436.0, image=self.image_image_7
        )
        
        # Create a white rectangle to cover the image background
        self.canvas.create_rectangle(
            675, 336, 1275, 536,  # Adjust coordinates to cover the status area
            fill="white", outline=""
        )
        
        self.image_image_8 = PhotoImage(file=relative_to_assets("image_8.png"))
        self.image_8 = self.canvas.create_image(
            362.0, 164.0, image=self.image_image_8
        )
        
        self.image_image_9 = PhotoImage(file=relative_to_assets("image_9.png"))
        self.image_9 = self.canvas.create_image(
            974.0, 354.0, image=self.image_image_9
        )
        
        # Add a back to home button
        self.back_button = Button(
            self,
            text="Back To Home",
            bg="#E9967A",
            fg="white",
            font=("Arial", 12, "bold"),
            borderwidth=0,
            highlightthickness=0,
            command=self.go_to_home_page,
            relief="flat"
        )
        self.back_button.place(x=1100, y=30, width=150, height=30)
        
        # Display donor data if available
        if self.donor_data:
            self.display_donor_data()
    
    def display_donor_data(self):
        """Display donor data on the dashboard next to labels"""
        if not self.donor_data:
            return
        
        # X position for data values (increase for better alignment)
        data_x = 320
        
        # Name
        name_label = Label(
            self,
            text=self.donor_data.get('name', 'N/A'),
            font=("Inter", 16),
            bg="white",
            anchor="w"
        )
        name_label.place(x=data_x, y=196)
        
        # Email
        email_label = Label(
            self,
            text=self.donor_data.get('email', 'N/A'),
            font=("Inter", 16),
            bg="white",
            anchor="w"
        )
        email_label.place(x=data_x, y=237)
        
        # Age
        age_label = Label(
            self,
            text=str(self.donor_data.get('age', 'N/A')),
            font=("Inter", 16),
            bg="white",
            anchor="w"
        )
        age_label.place(x=data_x, y=278)
        
        # Aadhaar
        aadhaar_label = Label(
            self,
            text=self.donor_data.get('aadhaar', 'N/A'),
            font=("Inter", 16),
            bg="white",
            anchor="w"
        )
        aadhaar_label.place(x=data_x, y=318)
        
        # Medical History
        medical_history_label = Label(
            self,
            text=self.donor_data.get('medical_history', 'N/A'),
            font=("Inter", 16),
            bg="white",
            anchor="w",
            wraplength=400
        )
        medical_history_label.place(x=data_x, y=356)
        
        # Address
        address_label = Label(
            self,
            text=self.donor_data.get('address', 'N/A'),
            font=("Inter", 16),
            bg="white",
            anchor="w",
            wraplength=400
        )
        address_label.place(x=data_x, y=397)
        
        # Gender
        gender_label = Label(
            self,
            text=self.donor_data.get('gender', 'N/A'),
            font=("Inter", 16),
            bg="white",
            anchor="w"
        )
        gender_label.place(x=data_x, y=482)
        
        # Blood Group
        blood_group_label = Label(
            self,
            text=self.donor_data.get('blood_type', 'N/A'),
            font=("Inter", 16),
            bg="white",
            anchor="w"
        )
        blood_group_label.place(x=data_x, y=520)
        
        # Organ to donate
        organ_label = Label(
            self,
            text=self.donor_data.get('organ', 'N/A'),
            font=("Inter", 16),
            bg="white",
            anchor="w"
        )
        organ_label.place(x=data_x, y=558)
        
        # Display status in the matching status box
        status_text = self.donor_data.get('status', 'Pending')
        
        # Check if there's a matched patient
        try:
            connection = mysql.connector.connect(
                host="localhost",
                user="root",
                password="Y@sh8105",
                database="Transplant"
            )
            cursor = connection.cursor(dictionary=True)
            
            # Query to find matched recipient
            cursor.execute("""
                SELECT recipient_name FROM matches 
                WHERE donor_name = %s
            """, (self.donor_data.get('name', ''),))
            
            match_data = cursor.fetchone()
            
            # Consume any remaining results
            while cursor.nextset():
                pass
                
            if cursor:
                cursor.close()
            if connection and connection.is_connected():
                connection.close()
            
            # Display matched patient info if found
            if match_data and match_data.get('recipient_name'):
                match_label = Label(
                    self,
                    text=f"You have been matched with: {match_data['recipient_name']}",
                    font=("Inter", 18, "bold"),
                    bg="#F9F9FF",
                    fg="#333333"
                )
                # Center the match text in the status box
                match_label.place(x=975, y=435, anchor="center")
            else:
                # If no match, display the status
                status_label = Label(
                    self,
                    text=f"Status: {status_text}",
                    font=("Inter", 18, "bold"),
                    bg="#F9F9FF",
                    fg="#333333"
                )
                status_label.place(x=975, y=435, anchor="center")
            
        except mysql.connector.Error as e:
            print(f"Error fetching match data: {e}")
            # In case of error, display the status
            status_label = Label(
                self,
                text=f"Status: {status_text}",
                font=("Inter", 18, "bold"),
                bg="#F9F9FF",
                fg="#333333"
            )
            status_label.place(x=975, y=435, anchor="center")
    
    def go_to_home_page(self):
        """Navigate back to the home page"""
        self.destroy()
        HomePage.HomePage()

if __name__ == "__main__":
    app = DonorDashboard()
    app.mainloop()
